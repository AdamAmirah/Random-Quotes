{"version":3,"sources":["components/Quote.module.css","components/QuoteList.js","components/QuoteButtons.js","hooks/use-http.js","components/Quote.js","App.js","index.js","components/QuoteButtons.module.css","components/QuoteList.module.css"],"names":["module","exports","QuoteList","props","quoteList","console","log","quoteNumber","quotes","length","onSelectQuote","quote","Fragment","style","color","className","classes","author","content","error","onClick","onFetch","loading","QuoteButtons","btns","href","encodeURI","selectedQuote","backgroundColor","type","rel","twitter","facebook","randomeNumber","Math","floor","random","onNewQuote","useHttp","useState","isLoading","setIsLoading","setError","sendRequest","useCallback","requestConfig","applyData","a","fetch","url","method","headers","body","JSON","stringify","response","ok","Error","json","data","message","randomColorGen","require","Quote","setQuotes","fetchQuotes","setQuoteNumber","toString","randomColor","setRandomColor","setSelectedQuote","useEffect","loadedQuotes","quoteId","quotesKey","push","quoteID","document","QuoteNumber","luminosity","format","alpha","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f08d45ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"Quote_quote__2eCbw\",\"pop\":\"Quote_pop__3ZCMU\"};","import classes from \"./QuoteList.module.css\";\r\nimport { FaQuoteLeft } from \"react-icons/fa\";\r\nimport React from \"react\";\r\nconst QuoteList = (props) => {\r\n  //console.log(props.quotes);\r\n  let quoteList = <h2>No tasks found.</h2>;\r\n  console.log(props.quoteNumber);\r\n  if (props.quotes.length > 0) {\r\n    props.onSelectQuote(props.quotes[props.quoteNumber].quote);\r\n    quoteList = (\r\n      <React.Fragment>\r\n        <p style={{ color: props.color }} className={classes[\"quote-text\"]}>\r\n          <FaQuoteLeft />\r\n          {props.quotes[props.quoteNumber].quote}\r\n        </p>\r\n        <p style={{ color: props.color }} className={classes.author}>\r\n          - {props.quotes[props.quoteNumber].author}\r\n        </p>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  let content = quoteList;\r\n\r\n  if (props.error) content = <button onClick={props.onFetch}>Try again</button>;\r\n\r\n  if (props.loading) content = \"Loading tasks...\";\r\n\r\n  return <React.Fragment>{content}</React.Fragment>;\r\n};\r\n\r\nexport default QuoteList;\r\n","import classes from \"./QuoteButtons.module.css\";\r\nimport { FaTwitter } from \"react-icons/fa\";\r\nimport { FaFacebook } from \"react-icons/fa\";\r\n\r\nconst QuoteButtons = (props) => {\r\n  const generateHandler = () => {\r\n    let randomeNumber = Math.floor(Math.random() * 101);\r\n    props.onNewQuote(randomeNumber);\r\n  };\r\n  return (\r\n    <>\r\n      <div className={classes.btns}>\r\n        <a\r\n          href={encodeURI(\r\n            `https://twitter.com/intent/tweet?text=${props.selectedQuote}&hashtags=thewebdevcoach`\r\n          )}\r\n        >\r\n          <button\r\n            style={{ backgroundColor: props.color }}\r\n            type=\"button\"\r\n            rel=\"noopener\"\r\n            className={classes.twitter}\r\n          >\r\n            <FaTwitter />\r\n          </button>\r\n        </a>\r\n\r\n        <a\r\n          href={encodeURI(\r\n            `https://www.facebook.com/dialog/feed?text=${props.selectedQuote}`\r\n          )}\r\n        >\r\n          <button\r\n            style={{ backgroundColor: props.color }}\r\n            type=\"button\"\r\n            rel=\"noopener\"\r\n            className={classes.facebook}\r\n          >\r\n            <FaFacebook />\r\n          </button>\r\n        </a>\r\n\r\n        <button\r\n          style={{ backgroundColor: props.color }}\r\n          className={classes[\"new-quote\"]}\r\n          type=\"submit\"\r\n          onClick={generateHandler}\r\n        >\r\n          New Quote\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuoteButtons;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nconst useHttp = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(requestConfig.url, {\r\n        method: requestConfig.method ? requestConfig.method : \"GET\",\r\n        headers: requestConfig.headers ? requestConfig.headers : {},\r\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      applyData(data);\r\n    } catch (err) {\r\n      setError(err.message || \"Something went wrong!\");\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  return {\r\n    isLoading,\r\n    error,\r\n    sendRequest,\r\n  };\r\n};\r\n\r\nexport default useHttp;\r\n","import classes from \"./Quote.module.css\";\r\nimport QuoteList from \"./QuoteList\";\r\nimport QuoteButtons from \"./QuoteButtons\";\r\nimport { useState, useEffect } from \"react\";\r\nimport useHttp from \"../hooks/use-http\";\r\nvar randomColorGen = require(\"randomcolor\");\r\n\r\nconst Quote = () => {\r\n  const [quotes, setQuotes] = useState([]);\r\n  const { isLoading, error, sendRequest: fetchQuotes } = useHttp();\r\n  const [quoteNumber, setQuoteNumber] = useState(\r\n    Math.floor(Math.random() * 101)\r\n  );\r\n  const [randomColor, setRandomColor] = useState(\r\n    \"#\" + Math.floor(Math.random() * 16777215).toString(16)\r\n  );\r\n  const [selectedQuote, setSelectedQuote] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const transformQuotes = (data) => {\r\n      let loadedQuotes = [];\r\n      let quoteId = 1;\r\n      for (let quotesKey of data) {\r\n        loadedQuotes.push({\r\n          quoteID: quoteId,\r\n          quote: quotesKey.quote,\r\n          author: quotesKey.author,\r\n        });\r\n        quoteId++;\r\n      }\r\n      setQuotes(loadedQuotes);\r\n    };\r\n\r\n    fetchQuotes(\r\n      {\r\n        url: \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\",\r\n      },\r\n      transformQuotes\r\n    );\r\n  }, [fetchQuotes]);\r\n\r\n  const newQuoteHandler = (QuoteNumber) => {\r\n    setQuoteNumber(QuoteNumber);\r\n    setRandomColor(\r\n      randomColorGen({\r\n        luminosity: \"dark\",\r\n        format: \"rgba\",\r\n        alpha: 0.5, // e.g. 'rgba(9, 1, 107, 0.5)',\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.body.style.backgroundColor = randomColor;\r\n  }, [randomColor]);\r\n\r\n  return (\r\n    <div className={classes.quote}>\r\n      <QuoteList\r\n        quotes={quotes}\r\n        quoteNumber={quoteNumber}\r\n        loading={isLoading}\r\n        error={error}\r\n        onFetch={fetchQuotes}\r\n        color={randomColor}\r\n        onSelectQuote={(data) => {\r\n          setSelectedQuote(data);\r\n        }}\r\n      />\r\n      <QuoteButtons\r\n        quotes={quotes}\r\n        color={randomColor}\r\n        onNewQuote={newQuoteHandler}\r\n        selectedQuote={selectedQuote}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quote;\r\n","import Quote from './components/Quote'\nfunction App() {\n  return (\n    <>\n      <Quote/>\n    </>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"QuoteButtons_btns__1BUKv\",\"twitter\":\"QuoteButtons_twitter__2dgce\",\"facebook\":\"QuoteButtons_facebook__loMNc\",\"new-quote\":\"QuoteButtons_new-quote__1sRmA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote-text\":\"QuoteList_quote-text__bgmcC\",\"author\":\"QuoteList_author__33iZK\"};"],"sourceRoot":""}